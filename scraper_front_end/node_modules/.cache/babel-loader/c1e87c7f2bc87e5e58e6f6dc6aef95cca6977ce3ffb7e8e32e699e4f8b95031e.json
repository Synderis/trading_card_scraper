{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan\\\\trading_card_scraper\\\\trading_card_scraper_front_end\\\\src\\\\Components\\\\DynamicRows.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Define the Row type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DynamicRows = () => {\n  _s();\n  // Initialize the state with the Row type\n  const [rows, setRows] = useState([{\n    cardName: '',\n    cardId: '',\n    cardOptions: []\n  }]);\n  const navigate = useNavigate();\n\n  // Change handler for text inputs\n  const handleChange = (index, field, value) => {\n    const newRows = [...rows]; // Create a shallow copy of rows\n    newRows[index] = {\n      ...newRows[index],\n      [field]: value\n    }; // Spread the row to update the specific field\n    setRows(newRows); // Update the state with the new rows\n  };\n\n  // Change handler for checkboxes\n  const handleCheckboxChange = (index, option) => {\n    const newRows = [...rows]; // Create a shallow copy of rows\n    const currentOptions = newRows[index].cardOptions;\n\n    // Toggle the checkbox option\n    if (currentOptions.includes(option)) {\n      newRows[index].cardOptions = currentOptions.filter(opt => opt !== option); // Remove if already included\n    } else {\n      newRows[index].cardOptions = [...currentOptions, option]; // Add if not included\n    }\n    setRows(newRows); // Update the state with the new rows\n  };\n\n  // Function to add a new row\n  const handleAddRow = () => {\n    setRows([...rows, {\n      cardName: '',\n      cardId: '',\n      cardOptions: []\n    }]); // Add a new empty row\n  };\n\n  // Function to handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:8000/submit', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(rows) // Send the rows data to the backend\n      });\n      if (!response.ok) {\n        throw new Error('Failed to submit rows'); // Handle error response\n      }\n\n      // Redirect to results page after successful submission\n      navigate('/results');\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [rows.map((row, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Card Name\",\n        value: row.cardName,\n        onChange: e => handleChange(index, 'cardName', e.target.value) // Update cardName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Card ID\",\n        value: row.cardId,\n        onChange: e => handleChange(index, 'cardId', e.target.value) // Update cardId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: row.cardOptions.includes('holo'),\n            onChange: () => handleCheckboxChange(index, 'holo') // Toggle Holo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), \"Holo\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: row.cardOptions.includes('reverse holo'),\n            onChange: () => handleCheckboxChange(index, 'reverse holo') // Toggle Reverse Holo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), \"Reverse Holo\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: row.cardOptions.includes('first edition'),\n            onChange: () => handleCheckboxChange(index, 'first edition') // Toggle First Edition\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), \"First Edition\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleAddRow,\n      children: \"Add Row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(DynamicRows, \"buFtyGG3fzRvczKQd3yhhg5xeSM=\", false, function () {\n  return [useNavigate];\n});\n_c = DynamicRows;\nexport default DynamicRows;\nvar _c;\n$RefreshReg$(_c, \"DynamicRows\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","DynamicRows","_s","rows","setRows","cardName","cardId","cardOptions","navigate","handleChange","index","field","value","newRows","handleCheckboxChange","option","currentOptions","includes","filter","opt","handleAddRow","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","onSubmit","children","map","row","type","placeholder","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","checked","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Dylan/trading_card_scraper/trading_card_scraper_front_end/src/Components/DynamicRows.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Define the Row type\r\ntype Row = {\r\n  cardName: string;\r\n  cardId: string;\r\n  cardOptions: string[];\r\n};\r\n\r\nconst DynamicRows: React.FC = () => {\r\n  // Initialize the state with the Row type\r\n  const [rows, setRows] = useState<Row[]>([{ cardName: '', cardId: '', cardOptions: [] }]);\r\n  const navigate = useNavigate();\r\n\r\n  // Change handler for text inputs\r\n  const handleChange = (index: number, field: keyof Row, value: string) => {\r\n    const newRows = [...rows]; // Create a shallow copy of rows\r\n    newRows[index] = { ...newRows[index], [field]: value }; // Spread the row to update the specific field\r\n    setRows(newRows); // Update the state with the new rows\r\n  };\r\n\r\n  // Change handler for checkboxes\r\n  const handleCheckboxChange = (index: number, option: string) => {\r\n    const newRows = [...rows]; // Create a shallow copy of rows\r\n    const currentOptions = newRows[index].cardOptions;\r\n\r\n    // Toggle the checkbox option\r\n    if (currentOptions.includes(option)) {\r\n      newRows[index].cardOptions = currentOptions.filter(opt => opt !== option); // Remove if already included\r\n    } else {\r\n      newRows[index].cardOptions = [...currentOptions, option]; // Add if not included\r\n    }\r\n    \r\n    setRows(newRows); // Update the state with the new rows\r\n  };\r\n\r\n  // Function to add a new row\r\n  const handleAddRow = () => {\r\n    setRows([...rows, { cardName: '', cardId: '', cardOptions: [] }]); // Add a new empty row\r\n  };\r\n\r\n  // Function to handle form submission\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await fetch('http://localhost:8000/submit', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(rows), // Send the rows data to the backend\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to submit rows'); // Handle error response\r\n      }\r\n\r\n      // Redirect to results page after successful submission\r\n      navigate('/results');\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {rows.map((row, index) => (\r\n        <div key={index}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Card Name\"\r\n            value={row.cardName}\r\n            onChange={(e) => handleChange(index, 'cardName', e.target.value)} // Update cardName\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Card ID\"\r\n            value={row.cardId}\r\n            onChange={(e) => handleChange(index, 'cardId', e.target.value)} // Update cardId\r\n          />\r\n          <div>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={row.cardOptions.includes('holo')}\r\n                onChange={() => handleCheckboxChange(index, 'holo')} // Toggle Holo\r\n              />\r\n              Holo\r\n            </label>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={row.cardOptions.includes('reverse holo')}\r\n                onChange={() => handleCheckboxChange(index, 'reverse holo')} // Toggle Reverse Holo\r\n              />\r\n              Reverse Holo\r\n            </label>\r\n            <label>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={row.cardOptions.includes('first edition')}\r\n                onChange={() => handleCheckboxChange(index, 'first edition')} // Toggle First Edition\r\n              />\r\n              First Edition\r\n            </label>\r\n          </div>\r\n        </div>\r\n      ))}\r\n      <button type=\"button\" onClick={handleAddRow}>Add Row</button> {/* Button to add more rows */}\r\n      <button type=\"submit\">Submit</button> {/* Submit button */}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default DynamicRows;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}