{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan\\\\trading_card_scraper\\\\scraper_front_end\\\\src\\\\Components\\\\ResultsPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// Define the possible keys of totals\n\n// Define the structure of totals\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Initialize the totals object\nconst initialTotals = {\n  card_count: 0,\n  Ungraded: 0\n};\n\n// Component to manage and display card totals\nconst CardTotals = () => {\n  _s();\n  const [totals, setTotals] = useState(initialTotals);\n  const [gradeInput, setGradeInput] = useState('');\n  const [amountInput, setAmountInput] = useState(0);\n\n  // Results state to store records of updates\n  const [results, setResults] = useState([]);\n\n  // Function to update totals based on a grade\n  const updateTotals = (grade, amount) => {\n    if (grade in totals) {\n      setTotals(prevTotals => ({\n        ...prevTotals,\n        [grade]: prevTotals[grade] + amount\n      }));\n\n      // Add the result to the results state\n      setResults(prevResults => [...prevResults, {\n        grade: grade,\n        amount\n      }]);\n    } else {\n      console.error(`Grade \"${grade}\" is not recognized.`);\n    }\n  };\n\n  // Handle form submission\n  const handleSubmit = e => {\n    e.preventDefault();\n    updateTotals(gradeInput, amountInput);\n    setGradeInput('');\n    setAmountInput(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Card Totals\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: gradeInput,\n        onChange: e => setGradeInput(e.target.value),\n        placeholder: \"Enter grade (e.g., 'Ungraded')\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: amountInput,\n        onChange: e => setAmountInput(Number(e.target.value)),\n        placeholder: \"Enter amount to add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Update Totals\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Current Totals:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Card Count: \", totals.card_count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Ungraded: \", totals.Ungraded]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Results:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Grade\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Amount Added\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: results.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            colSpan: 2,\n            children: \"No updates made yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this) : results.map((result, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.grade\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: result.amount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(CardTotals, \"5qYd6FEnxuEhAd4JEuxt8KT7HV8=\");\n_c = CardTotals;\nexport default CardTotals;\nvar _c;\n$RefreshReg$(_c, \"CardTotals\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","initialTotals","card_count","Ungraded","CardTotals","_s","totals","setTotals","gradeInput","setGradeInput","amountInput","setAmountInput","results","setResults","updateTotals","grade","amount","prevTotals","prevResults","console","error","handleSubmit","e","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","Number","length","colSpan","map","result","index","_c","$RefreshReg$"],"sources":["C:/Users/Dylan/trading_card_scraper/scraper_front_end/src/Components/ResultsPage.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\n// Define the possible keys of totals\r\ntype Grade = 'card_count' | 'Ungraded';\r\n\r\n// Define the structure of totals\r\ninterface Totals {\r\n    card_count: number;\r\n    Ungraded: number;\r\n}\r\n\r\n// Initialize the totals object\r\nconst initialTotals: Totals = {\r\n    card_count: 0,\r\n    Ungraded: 0,\r\n};\r\n\r\n// Component to manage and display card totals\r\nconst CardTotals: React.FC = () => {\r\n    const [totals, setTotals] = useState<Totals>(initialTotals);\r\n    const [gradeInput, setGradeInput] = useState<string>('');\r\n    const [amountInput, setAmountInput] = useState<number>(0);\r\n    \r\n    // Results state to store records of updates\r\n    const [results, setResults] = useState<{ grade: Grade; amount: number }[]>([]);\r\n\r\n    // Function to update totals based on a grade\r\n    const updateTotals = (grade: string, amount: number) => {\r\n        if (grade in totals) {\r\n            setTotals((prevTotals) => ({\r\n                ...prevTotals,\r\n                [grade as keyof Totals]: prevTotals[grade as keyof Totals] + amount,\r\n            }));\r\n\r\n            // Add the result to the results state\r\n            setResults((prevResults) => [...prevResults, { grade: grade as Grade, amount }]);\r\n        } else {\r\n            console.error(`Grade \"${grade}\" is not recognized.`);\r\n        }\r\n    };\r\n\r\n    // Handle form submission\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        updateTotals(gradeInput, amountInput);\r\n        setGradeInput('');\r\n        setAmountInput(0);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Card Totals</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={gradeInput}\r\n                    onChange={(e) => setGradeInput(e.target.value)}\r\n                    placeholder=\"Enter grade (e.g., 'Ungraded')\"\r\n                />\r\n                <input\r\n                    type=\"number\"\r\n                    value={amountInput}\r\n                    onChange={(e) => setAmountInput(Number(e.target.value))}\r\n                    placeholder=\"Enter amount to add\"\r\n                />\r\n                <button type=\"submit\">Update Totals</button>\r\n            </form>\r\n\r\n            {/* Display current totals */}\r\n            <h2>Current Totals:</h2>\r\n            <ul>\r\n                <li>Card Count: {totals.card_count}</li>\r\n                <li>Ungraded: {totals.Ungraded}</li>\r\n            </ul>\r\n\r\n            {/* Results table to show history of updates */}\r\n            <h2>Results:</h2>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Grade</th>\r\n                        <th>Amount Added</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {results.length === 0 ? (\r\n                        <tr>\r\n                            <td colSpan={2}>No updates made yet.</td>\r\n                        </tr>\r\n                    ) : (\r\n                        results.map((result, index) => (\r\n                            <tr key={index}>\r\n                                <td>{result.grade}</td>\r\n                                <td>{result.amount}</td>\r\n                            </tr>\r\n                        ))\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardTotals;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}