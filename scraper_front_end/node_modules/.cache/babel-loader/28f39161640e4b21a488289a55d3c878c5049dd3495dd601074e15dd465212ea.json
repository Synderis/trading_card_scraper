{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan\\\\trading_card_scraper\\\\trading_card_scraper_front_end\\\\src\\\\Components\\\\DynamicRows.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../CSS Sheets/DynamicRows.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DynamicRows = () => {\n  _s();\n  const navigate = useNavigate();\n  const [rows, setRows] = useState([{\n    cardName: '',\n    cardId: '',\n    cardOptions: []\n  }\n  // Initialize with more rows as needed\n  ]);\n  const handleChange = (index, field, value) => {\n    const newRows = [...rows];\n    if (field === 'cardOptions') {\n      // Manage checkbox options\n      if (newRows[index].cardOptions.includes(value)) {\n        newRows[index].cardOptions = newRows[index].cardOptions.filter(option => option !== value);\n      } else {\n        newRows[index].cardOptions.push(value);\n      }\n    } else {\n      newRows[index][field] = value;\n    }\n    setRows(newRows);\n  };\n  const handleAddRows = () => {\n    const newRowsToAdd = Array.from({\n      length: 10\n    }, () => ({\n      cardName: '',\n      cardId: '',\n      cardOptions: []\n    }));\n    setRows(prevRows => [...prevRows, ...newRowsToAdd]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch('http://localhost:8000/submit', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(rows)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to submit rows');\n      }\n\n      // Navigate to results page\n      navigate('/results');\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [rows.map((row, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: row.cardName,\n        onChange: e => handleChange(index, 'cardName', e.target.value),\n        placeholder: \"Card Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: row.cardId,\n        onChange: e => handleChange(index, 'cardId', e.target.value),\n        placeholder: \"Card ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: row.cardOptions.includes('holo'),\n          onChange: () => handleChange(index, 'cardOptions', 'holo')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), \"Holo\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: row.cardOptions.includes('reverse holo'),\n          onChange: () => handleChange(index, 'cardOptions', 'reverse holo')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), \"Reverse Holo\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: row.cardOptions.includes('first edition'),\n          onChange: () => handleChange(index, 'cardOptions', 'first edition')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), \"First Edition\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleAddRows,\n      children: \"Add 10 More Rows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(DynamicRows, \"mpLGx65ovIS2aV10/SJiKiOLtPM=\", false, function () {\n  return [useNavigate];\n});\n_c = DynamicRows;\nexport default DynamicRows;\nvar _c;\n$RefreshReg$(_c, \"DynamicRows\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","DynamicRows","_s","navigate","rows","setRows","cardName","cardId","cardOptions","handleChange","index","field","value","newRows","includes","filter","option","push","handleAddRows","newRowsToAdd","Array","from","length","prevRows","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","onSubmit","children","map","row","className","type","onChange","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","checked","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Dylan/trading_card_scraper/trading_card_scraper_front_end/src/Components/DynamicRows.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport '../CSS Sheets/DynamicRows.css';\r\n\r\ntype Row = {\r\n  cardName: string;\r\n  cardId: string;\r\n  cardOptions: string[];\r\n};\r\n\r\nconst DynamicRows: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const [rows, setRows] = useState<Row[]>([\r\n    { cardName: '', cardId: '', cardOptions: [] },\r\n    // Initialize with more rows as needed\r\n  ]);\r\n\r\n  const handleChange = (index: number, field: string, value: string | boolean) => {\r\n    const newRows = [...rows];\r\n    if (field === 'cardOptions') {\r\n      // Manage checkbox options\r\n      if (newRows[index].cardOptions.includes(value as string)) {\r\n        newRows[index].cardOptions = newRows[index].cardOptions.filter(option => option !== value);\r\n      } else {\r\n        newRows[index].cardOptions.push(value as string);\r\n      }\r\n    } else {\r\n      newRows[index][field] = value as string;\r\n    }\r\n    setRows(newRows);\r\n  };\r\n\r\n  const handleAddRows = () => {\r\n    const newRowsToAdd: Row[] = Array.from({ length: 10 }, () => ({ cardName: '', cardId: '', cardOptions: [] }));\r\n    setRows(prevRows => [...prevRows, ...newRowsToAdd]);\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await fetch('http://localhost:8000/submit', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(rows),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to submit rows');\r\n      }\r\n\r\n      // Navigate to results page\r\n      navigate('/results');\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {rows.map((row, index) => (\r\n        <div key={index} className=\"row\">\r\n          <input\r\n            type=\"text\"\r\n            value={row.cardName}\r\n            onChange={(e) => handleChange(index, 'cardName', e.target.value)}\r\n            placeholder=\"Card Name\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            value={row.cardId}\r\n            onChange={(e) => handleChange(index, 'cardId', e.target.value)}\r\n            placeholder=\"Card ID\"\r\n          />\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={row.cardOptions.includes('holo')}\r\n              onChange={() => handleChange(index, 'cardOptions', 'holo')}\r\n            />\r\n            Holo\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={row.cardOptions.includes('reverse holo')}\r\n              onChange={() => handleChange(index, 'cardOptions', 'reverse holo')}\r\n            />\r\n            Reverse Holo\r\n          </label>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={row.cardOptions.includes('first edition')}\r\n              onChange={() => handleChange(index, 'cardOptions', 'first edition')}\r\n            />\r\n            First Edition\r\n          </label>\r\n        </div>\r\n      ))}\r\n      <button type=\"button\" onClick={handleAddRows}>Add 10 More Rows</button>\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default DynamicRows;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}