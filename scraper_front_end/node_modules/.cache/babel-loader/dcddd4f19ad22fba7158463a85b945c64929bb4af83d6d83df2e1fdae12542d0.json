{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dylan\\\\trading_card_scraper\\\\trading_card_scraper_front_end\\\\src\\\\Components\\\\DynamicRows.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DynamicRows = () => {\n  _s();\n  const [rows, setRows] = useState(createInitialRows(10));\n  function createInitialRows(count) {\n    return Array.from({\n      length: count\n    }, () => ({\n      input1: '',\n      input2: '',\n      selectedOptions: []\n    }));\n  }\n  const handleInputChange = (e, index) => {\n    const {\n      name,\n      value,\n      checked\n    } = e.target;\n    const newRows = [...rows];\n    if (name.startsWith('checkbox')) {\n      if (checked) {\n        newRows[index].selectedOptions.push(value);\n      } else {\n        newRows[index].selectedOptions = newRows[index].selectedOptions.filter(option => option !== value);\n      }\n    } else {\n      newRows[index][name] = value;\n    }\n    setRows(newRows);\n  };\n  const handleAddRows = () => {\n    setRows([...rows, ...createInitialRows(10)]);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Filter rows where both input1 and input2 are not empty\n    const validRows = rows.filter(row => row.input1.trim() !== '' && row.input2.trim() !== '');\n    if (validRows.length === 0) {\n      alert('No valid rows to submit.');\n      return;\n    }\n    console.log('Submitted Valid Rows:', validRows);\n    alert('Form submitted! Check console for valid data.');\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [rows.map((row, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"input1\",\n        value: row.input1,\n        onChange: e => handleInputChange(e, index),\n        placeholder: \"Input 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"input2\",\n        value: row.input2,\n        onChange: e => handleInputChange(e, index),\n        placeholder: \"Input 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: `checkbox-${index}`,\n          value: \"holo\",\n          checked: row.selectedOptions.includes('holo'),\n          onChange: e => handleInputChange(e, index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), \"Holo\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: `checkbox-${index}`,\n          value: \"reverse holo\",\n          checked: row.selectedOptions.includes('reverse holo'),\n          onChange: e => handleInputChange(e, index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), \"Reverse Holo\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          name: `checkbox-${index}`,\n          value: \"first edition\",\n          checked: row.selectedOptions.includes('first edition'),\n          onChange: e => handleInputChange(e, index)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), \"First Edition\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handleAddRows,\n      children: \"Add 10 More Rows\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(DynamicRows, \"BjlnABgiO/NS4LVnKx9ATtxAmPk=\");\n_c = DynamicRows;\nexport default DynamicRows;\nvar _c;\n$RefreshReg$(_c, \"DynamicRows\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DynamicRows","_s","rows","setRows","createInitialRows","count","Array","from","length","input1","input2","selectedOptions","handleInputChange","e","index","name","value","checked","target","newRows","startsWith","push","filter","option","handleAddRows","handleSubmit","preventDefault","validRows","row","trim","alert","console","log","onSubmit","children","map","style","marginBottom","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","includes","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Dylan/trading_card_scraper/trading_card_scraper_front_end/src/Components/DynamicRows.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\ninterface RowData {\r\n    input1: string;\r\n    input2: string;\r\n    selectedOptions: string[];\r\n}\r\n\r\nconst DynamicRows: React.FC = () => {\r\n    const [rows, setRows] = useState<RowData[]>(createInitialRows(10));\r\n\r\n    function createInitialRows(count: number): RowData[] {\r\n        return Array.from({ length: count }, () => ({\r\n            input1: '',\r\n            input2: '',\r\n            selectedOptions: [],\r\n        }));\r\n    }\r\n\r\n    const handleInputChange = (\r\n        e: React.ChangeEvent<HTMLInputElement>,\r\n        index: number\r\n    ) => {\r\n        const { name, value, checked } = e.target;\r\n        const newRows = [...rows];\r\n\r\n        if (name.startsWith('checkbox')) {\r\n            if (checked) {\r\n                newRows[index].selectedOptions.push(value);\r\n            } else {\r\n                newRows[index].selectedOptions = newRows[index].selectedOptions.filter(\r\n                    (option) => option !== value\r\n                );\r\n            }\r\n        } else {\r\n            (newRows[index] as any)[name] = value;\r\n        }\r\n        setRows(newRows);\r\n    };\r\n\r\n    const handleAddRows = () => {\r\n        setRows([...rows, ...createInitialRows(10)]);\r\n    };\r\n\r\n    const handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n\r\n        // Filter rows where both input1 and input2 are not empty\r\n        const validRows = rows.filter(\r\n            (row) => row.input1.trim() !== '' && row.input2.trim() !== ''\r\n        );\r\n\r\n        if (validRows.length === 0) {\r\n            alert('No valid rows to submit.');\r\n            return;\r\n        }\r\n\r\n        console.log('Submitted Valid Rows:', validRows);\r\n        alert('Form submitted! Check console for valid data.');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {rows.map((row, index) => (\r\n                <div key={index} style={{ marginBottom: '10px' }}>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"input1\"\r\n                        value={row.input1}\r\n                        onChange={(e) => handleInputChange(e, index)}\r\n                        placeholder=\"Input 1\"\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"input2\"\r\n                        value={row.input2}\r\n                        onChange={(e) => handleInputChange(e, index)}\r\n                        placeholder=\"Input 2\"\r\n                    />\r\n                    <label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name={`checkbox-${index}`}\r\n                            value=\"holo\"\r\n                            checked={row.selectedOptions.includes('holo')}\r\n                            onChange={(e) => handleInputChange(e, index)}\r\n                        />\r\n                        Holo\r\n                    </label>\r\n                    <label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name={`checkbox-${index}`}\r\n                            value=\"reverse holo\"\r\n                            checked={row.selectedOptions.includes('reverse holo')}\r\n                            onChange={(e) => handleInputChange(e, index)}\r\n                        />\r\n                        Reverse Holo\r\n                    </label>\r\n                    <label>\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            name={`checkbox-${index}`}\r\n                            value=\"first edition\"\r\n                            checked={row.selectedOptions.includes('first edition')}\r\n                            onChange={(e) => handleInputChange(e, index)}\r\n                        />\r\n                        First Edition\r\n                    </label>\r\n                </div>\r\n            ))}\r\n            <button type=\"button\" onClick={handleAddRows}>Add 10 More Rows</button>\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default DynamicRows;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}